@page "/orders"
@using System.Text.Json;
@using Ecommerce.Components.Shared
@using Ecommerce.Components.Shared.Misc
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Orders</PageTitle>

<div class="admin-page">
    <Sidebar CurrentPage="orders" />

    <div class="content">
        <div class="header">
            <h1 class="page-title">Orders</h1>

            <div class="user">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 250 250"><g id="Layer_2" data-name="Layer 2"><path d="M170.41,132.78a68.34,68.34,0,1,0-91.12,0,97.65,97.65,0,0,0-65.38,92,11.7,11.7,0,0,0,23.39,0,74.34,74.34,0,0,1,74.26-74.27h26.88a74.34,74.34,0,0,1,74.26,74.27,11.7,11.7,0,0,0,23.39,0A97.65,97.65,0,0,0,170.41,132.78Zm-45.56-95.3A44.73,44.73,0,1,1,80.12,82.21a44.73,44.73,0,0,1,44.73-44.73Z" /></g></svg>
                </div>

                <div class="info">
                    <h6>Group 4 Admin</h6>
                    <p class="light">group4@prof-elec.com</p>
                </div>
            </div>
        </div>

        <div class="main">
            <div class="header-options">
                <div class="group">
                    <h6>Filter by Status</h6>
                    <div class="radio-group">
                        <button class="@(FilterStatus == "all" ? "active" : "")" @onclick='() => FilterOrders("all")'>All</button>
                        <button class="@(FilterStatus == "active" ? "active" : "")" @onclick='() => FilterOrders("active")'>Active</button>
                        <button class="@(FilterStatus == "completed" ? "active" : "")" @onclick='() => FilterOrders("completed")'>Completed</button>
                    </div>
                </div>

                <div class="group">
                    <h6>Sort by</h6>
                    <div class="radio-group">
                        <button class="@(SortField == "date" ? "active" : "")" @onclick='() => UpdateSorting("date")'>Date</button>
                        <button class="@(SortField == "item_qty" ? "active" : "")" @onclick='() => UpdateSorting("item_qty")'>Item Qty</button>
                        <button class="@(SortField == "total" ? "active" : "")" @onclick='() => UpdateSorting("total")'>Total</button>
                    </div>

                    <div class="radio-group">
                        <button class="@(IsAscending ? "active" : "")" @onclick="() => IsAscending = true">Ascending</button>
                        <button class="@(IsAscending ? "" : "active")" @onclick="() => IsAscending = false">Descending</button>
                    </div>
                </div>
            </div>

            <div class="table-card">
                <div class="header admin-orders-spacing labels">
                    <p>Status</p>
                    <p>Reference No.</p>
                    <p>Date</p>
                    <p>Item Qty.</p>
                    <p>Total</p>
                    <p>Action</p>
                </div>

                <div class="body">
                    @foreach (var order in GetFilteredOrders())
                    {
                        <div class="row admin-orders-spacing">
                            <p>@order.status</p>
                            <p>@order.reference_number</p>
                            <p>@order.date.ToString("yyyy-MM-dd")</p>
                            <p>@order.products.Sum(p => p.quantity)</p>
                            <p>₱@FormatPrice(order.products.Sum(p => p.price * p.quantity))</p>
                            <p>
                                @if (order.status == "active")
                                {
                                    <button class="complete" @onclick='() => CompleteOrder(order.id)'>Complete Order</button>
                                }
                                else
                                {
                                    <span class="completed">Completed</span>
                                }
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Order> OrderList = new();
    private string FilterStatus = "all";
    private string SortField = "date";
    private bool IsAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await FetchOrders();
    }

    private async Task FetchOrders()
    {
        using HttpClient client = new();
        client.BaseAddress = new Uri("https://prof-elec.vercel.app/");
        var response = await client.GetAsync("orders");
        response.EnsureSuccessStatusCode();
        var json = await response.Content.ReadAsStringAsync();
        OrderList = JsonSerializer.Deserialize<List<Order>>(json);
    }

    private IEnumerable<Order> GetFilteredOrders()
    {
        var filtered = FilterStatus switch
        {
            "active" => OrderList.Where(o => o.status == "active"),
            "completed" => OrderList.Where(o => o.status == "completed"),
            _ => OrderList
        };

        return SortField switch
        {
            "date" => IsAscending ? filtered.OrderBy(o => o.date) : filtered.OrderByDescending(o => o.date),
            "item_qty" => IsAscending ? filtered.OrderBy(o => o.products.Sum(p => p.quantity)) : filtered.OrderByDescending(o => o.products.Sum(p => p.quantity)),
            "total" => IsAscending ? filtered.OrderBy(o => o.products.Sum(p => p.price * p.quantity)) : filtered.OrderByDescending(o => o.products.Sum(p => p.price * p.quantity)),
            _ => filtered
        };
    }

    private void FilterOrders(string status)
    {
        FilterStatus = status;
    }

    private void UpdateSorting(string field)
    {
        if (SortField == field)
        {
            IsAscending = !IsAscending;
        }
        else
        {
            SortField = field;
            IsAscending = true;
        }
    }

    private async Task CompleteOrder(int orderId)
    {
        var order = OrderList.FirstOrDefault(o => o.id == orderId);
        if (order != null && order.status == "active")
        {
            order.status = "completed";
            await Task.Delay(500); // Simulate API update (replace with actual API call if needed)
        }
    }

    private string FormatPrice(decimal price)
    {
        return price.ToString("N0"); // Formats price as 1,000 or similar based on locale
    }

    public class Order
    {
        public int id { get; set; }
        public DateTime date { get; set; }
        public string status { get; set; }
        public string reference_number { get; set; }
        public List<Product> products { get; set; } = new();
    }

    public class Product
    {
        public int id { get; set; }
        public string name { get; set; }
        public decimal price { get; set; }
        public string brand { get; set; }
        public string category { get; set; }
        public string type { get; set; }
        public string image_url { get; set; }
        public int quantity { get; set; }
    }
}
